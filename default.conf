# Standards in this script:
#   POSIX compliance:
#      - http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html
#      - https://www.gnu.org/software/autoconf/manual/autoconf.html#Portable-Shell
#
# Source code, documentation and support:
#   https://github.com/mbideau/backup-with-borg
#
# Copyright (C) 2016-2021 Michael Bideau [France]
#
# This file is part of backup-with-borg.
#
# backup-with-borg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# backup-with-borg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with backup-with-borg. If not, see <https://www.gnu.org/licenses/>.
#

# Intented to be included/sourced by a shell script
# Default backup configuration to use with borg backup script

# Note: following env vars are not defined here but used :
#    # send an email to this recipient in case of failure
#    MAILTO="contact@example.com"
#    # the passhprase for the repository encryption (crypt/decrypt the key).
#    # it should be passed by environment (not sure about security of this)
#    BORG_PASSPHRASE="FR234TFGDF543GH54GFG"

# debug mode
[ "$DEBUG" != '' ] || DEBUG=true

# borg binary
[ "$BORG_BIN" != '' ] || BORG_BIN="`which borg||true`"

# backup dir
[ "$BACKUP_DIR" != '' ]   ||Â BACKUP_DIR=/var/backup/borg
[ "$BACKUP_OWNER" != '' ] || BACKUP_OWNER=root
[ "$BACKUP_GROUP" != '' ] || BACKUP_GROUP=root
[ "$DIR_MODE" != '' ]     || DIR_MODE=750

# repository parameters
[ "$REPO_DIR" != '' ]    || REPO_DIR="$BACKUP_DIR"/repository
[ "$KEYS_DIR" != '' ]    || KEYS_DIR=/etc/borg/keys
[ "$UMASK" != '' ]       || UMASK=0027
[ "$COMPRESSION" != '' ] || COMPRESSION=lzma,9
[ "$CACHE_DIR" != '' ]   || CACHE_DIR=/var/cache/borg
[ "$TEMP_DIR" != '' ]    || TEMP_DIR=/tmp/borg
[ "$LOGS_DIR" != '' ]    || LOGS_DIR=/var/log/borg
[ "$APPEND_ONLY" != '' ] || APPEND_ONLY=true

# extra backups
[ "$BIN_DIR" != '' ]         || BIN_DIR="$BACKUP_DIR"/bin
[ "$KEYS_BACKUP_DIR" != '' ] || KEYS_BACKUP_DIR="$BACKUP_DIR"/keys

# retention strategy
[ "$RETENTION_DAYS" != '' ]   || RETENTION_DAYS=30
[ "$RETENTION_WEEKS" != '' ]  || RETENTION_WEEKS=4
[ "$RETENTION_MONTHS" != '' ] || RETENTION_MONTHS=-1
[ "$RETENTION_YEARS" != '' ]  || RETENTION_YEARS=-1

# borg passhrase file
[ "$PASSPHRASE_FILE" != '' ] || PASSPHRASE_FILE=/etc/borg/root-fs.pass

# archive name for backup of root fs
[ "$ROOT_ARCHIVE_PREFIX" != '' ] || ROOT_ARCHIVE_PREFIX="root-fs"
[ "$ROOT_ARCHIVE_NAME" != '' ]   || ROOT_ARCHIVE_NAME="${ROOT_ARCHIVE_PREFIX}_{now:%Y-%m-%d_%H-%M-%S}"

# exclusions when backuping the root fs
[ "$ROOT_EXCLUDE_FILE" != '' ]   || ROOT_EXCLUDE_FILE=/etc/borg/root-fs.excludes

# LOGS
[ "$LOG_FILE_MODE" != '' ] || LOG_FILE_MODE=640
# where the output of the repository initialization will be
[ "$INIT_OUTPUT_FILE" != '' ] || INIT_OUTPUT_FILE="$LOGS_DIR"/init.last-output.log
# where the output of the root fs backup operation will be
[ "$ROOT_OUTPUT_FILE" != '' ] || ROOT_OUTPUT_FILE="$LOGS_DIR"/root-fs.last-output.log
# where the output of the check repository operation will be
[ "$CHECK_OUTPUT_FILE" != '' ] || CHECK_OUTPUT_FILE="$LOGS_DIR"/check-repo.last-output.log
# where to log last backup date
[ "$ROOT_LAST_BACKUP_LOG" != '' ] || ROOT_LAST_BACKUP_LOG="$LOGS_DIR"/last_backup_date.log
BACKUP_DATE=`date '+%F %T'`

# LOCKS
[ "$LOCK_FILE" != '' ] || LOCK_FILE="$BACKUP_DIR"/.an_operation_is_running.lock
LOCK_REPO_ROSTER="$REPO_DIR"/lock.roster
LOCK_REPO_EXCLUSIVE="$REPO_DIR"/lock.exclusive

# automaticaly remove interrupted backup?
[ "$AUTO_REMOVE_INTERRUPTED_BACKUP" != '' ] || AUTO_REMOVE_INTERRUPTED_BACKUP=Y

# configuration of the fuse mount
[ "$BORG_MOUNT_TO" != '' ]      || BORG_MOUNT_TO=/mnt/borg-fuse
[ "$BORG_MOUNT_UMASK" != '' ]   || BORG_MOUNT_UMASK=0022
[ "$BORG_MOUNT_OPTIONS" != '' ] || BORG_MOUNT_OPTIONS=ro,noatime,allow_other,default_permissions

# mail
[ "$MAIL_BIN" != '' ] || MAIL_BIN="`which mail||true`"
MAIL_MESSAGE_CREATION_FAILED_BODY="The backup archive creation failed.\nThe log is below."
MAIL_MESSAGE_CREATION_FAILED_SUBJECT="Borg - failure of backup job 'root-fs'"
MAIL_MESSAGE_CHECK_FAILED_BODY="The integrity check of the repository has failed.\nThe log is below."
MAIL_MESSAGE_CHECK_FAILED_SUBJECT="Borg - failure of backup job 'root-fs' (integrity check failed)"
MAIL_MESSAGE_PRUNE_FAILED_BODY="Pruning backup archives has failed.\nThe log is below."
MAIL_MESSAGE_PRUNE_FAILED_SUBJECT="Borg - failed to prune 'root-fs' archives"

# vim: ft=sh
